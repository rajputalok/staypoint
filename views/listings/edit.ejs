<% layout("/layouts/boilerplate.ejs") %>
<div class="row">
    <div class="col-8 offset-2">
    <h3 class="mt-3">Edit your Listing</h3>
    <form method="POST" action="/listings/<%= listing._id %>?_method=PUT" novalidate class="needs-validation" enctype="multipart/form-data">
        <div class="mb-3">
            <label for="title" class="form-label" >Title</label>
            <input name="listing[title]" value="<%= listing.title %>" type="text" class="form-control" required>
            <div class="valid-feedback">Title looks good!</div>
            <div class="invalid-feedback">Title should be valid</div>
        </div>
        <div class="mb-3">
            <label for="description" class="form-label" >Description</label>
             <textarea name="listing[description]" class="form-control" required><%= listing.description %> ></textarea>
             <div class="invalid-feedback">Please enter a short Description</div>
        </div>
        <div class="mb-3">
            Original Listing Image <br>
            <img src="<%= originalImageUrl %>" alt="">
        </div>
        <div class="mb-3">
            <label for="image" class="form-label" >Upload New Image</label>
             <input type="file" name="listing[image]" class="form-control">
        </div>
        <div class="row col">
            <div class="mb-3 col-md-4">
                <label for="price" class="form-label" >Price</label>
                <input name="listing[price]" value="<%= listing.price %>" type="Number" class="form-control" required>
                <div class="invalid-feedback">Price should be valid</div>
            </div>
            <div class="mb-3 col-md-8">
                <label for="country" class="form-label" >Country</label>
                <input name="listing[country]" value="<%= listing.country %>" type="text" class="form-control" required>
                <div class="invalid-feedback">Country should be valid</div>
            </div>
        </div>
        
        <div class="mb-3">
            <label for="location" class="form-label">Location</label>
            <input
            type="text"
            id="addressInput"
            placeholder="Search for address"
            autocomplete="off"
            class="form-control"
            oninput="getSuggestions(this.value)"
            required
            />
            <div
            id="suggestions"
            style="border: 1px solid #ccc; max-height: 150px; overflow-y: auto; display: none;"
            ></div>

            <div id="map" style="height: 300px; margin-top: 10px;"></div>

            <input type="hidden" name="listing[latitude]" id="latitude" required />
            <input type="hidden" name="listing[longitude]" id="longitude" required />
            <input type="hidden" name="listing[location]" id="formattedAddress" required />

        <button class="btn btn-dark edit-btn mt-3" >Edit</button>
    </form>
    </div>

     <!-- Map -->

    <script src="https://unpkg.com/maplibre-gl@2.4.0/dist/maplibre-gl.js"></script>
    <link href="https://unpkg.com/maplibre-gl@2.4.0/dist/maplibre-gl.css" rel="stylesheet" />
        
    <script>
    const apiKey = "<%= process.env.MAP_TOKEN %>";

    const map = new maplibregl.Map({
        container: "map",
        style: `https://maps.geoapify.com/v1/styles/osm-bright/style.json?apiKey=${apiKey}`,
        center: [77.209, 28.6139], // New Delhi default center
        zoom: 5,
    });

    map.addControl(new maplibregl.NavigationControl());

    let marker = null;

    function getSuggestions(query) {
        const suggestionsBox = document.getElementById("suggestions");

        if (!query) {
        suggestionsBox.style.display = "none";
        return;
        }

        const autocompleteUrl = `https://api.geoapify.com/v1/geocode/autocomplete?text=${encodeURIComponent(
        query
        )}&limit=5&apiKey=${apiKey}`;

        fetch(autocompleteUrl)
        .then((res) => res.json())
        .then((data) => {
            suggestionsBox.innerHTML = "";

            if (!data.features.length) {
            suggestionsBox.style.display = "none";
            return;
            }

            data.features.forEach((feature) => {
            const div = document.createElement("div");
            div.textContent = feature.properties.formatted;
            div.style.padding = "8px";
            div.style.cursor = "pointer";
            div.onclick = () => {
                document.getElementById("addressInput").value =
                feature.properties.formatted;
                suggestionsBox.style.display = "none";

                const [lon, lat] = feature.geometry.coordinates;

                if (marker) marker.remove();

                marker = new maplibregl.Marker({color: "red"})
                .setLngLat([lon, lat])
                .setPopup(
                            new maplibregl.Popup({ offset: 25 })
                            .setHTML(`<i class="fa-regular fa-compass"><%=listing.title%></i><h6>${feature.properties.formatted}</h6>`)
                        )
                .addTo(map);
                marker.getPopup().addTo(map);
                map.flyTo({ center: [lon, lat], zoom: 15 });

                document.getElementById("latitude").value = lat;
                document.getElementById("longitude").value = lon;
                document.getElementById("formattedAddress").value =
                feature.properties.formatted;

                document
                .getElementById("addressInput")
                .classList.remove("is-invalid");
                document.getElementById("addressInput").classList.add("is-valid");
            };
            suggestionsBox.appendChild(div);
            });

            suggestionsBox.style.display = "block";
        })
        .catch(console.error);
    }

    document
        .getElementById("addressInput")
        .addEventListener("input", function () {
        if (!this.value && marker) {
            marker.remove();
            marker = null;
            document.getElementById("latitude").value = "";
            document.getElementById("longitude").value = "";
            document.getElementById("formattedAddress").value = "";
            this.classList.remove("is-valid");
        }
        });

    document.querySelector("form").addEventListener("submit", (e) => {
        const lat = document.getElementById("latitude").value;
        const lon = document.getElementById("longitude").value;
        if (!lat || !lon) {
        e.preventDefault();
        alert("Please select a valid location from the search box.");
        document.getElementById("addressInput").classList.add("is-invalid");
        }
    });
    </script>
</div>
